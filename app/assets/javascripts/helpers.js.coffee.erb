<% require_dependency(File.join(Rails.root,'app/models/tournament')) %>

String::sprintf  = (args...) -> vsprintf(this, args)
String::vsprintf = (args)    -> vsprintf(this, args)

Math.log2 = (num) -> Math.log(num) / Math.LN2


String::underscore = ->
  this.
  replace(/\W+/g, "_").
  replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').
  replace(/([a-z\d])([A-Z])/g,     '$1_$2').
  replace(/_+/g, "_").
  toLowerCase()

String::to_i = ->
  parseInt(this)

#

_.present = (obj) ->
  return false if not obj                  # falsy  is not present
  return (obj.length > 0) if _.isArray(obj) or _.isString(obj) # not present if length 0
  return true if  $.type(obj) != 'object'  # dates, numbers, regexps etc are present
  return (obj.length > 0) if obj.length?   # not present if object with obj.length 0
  return true for own key of obj           # an object with keys is present
  false                                    # otherwise, not present
_.blank = (val) -> not _.present(val)

# Return the first argument with a preset (non-blank) result (if a function) or value (otherwise).
# Short-circuits: a function will not be evaluated if a prior argument was present
_.first_present = (args...) ->
  result = null
  _.each args, (fn, index, list) ->
    val = if _.isFunction(fn) then do(fn) else fn
    if _.present(val) then (result = val ; _.breakLoop())
  result

window.MATCH_FOR_SEED = <%= Tournament::MATCH_FOR_SEED.to_json %>
window.SEED_FOR_SLOT  = <%= Tournament::SEED_FOR_SLOT.to_json %>
window.SLOT_FOR_SEED  = <%= Tournament::SLOT_FOR_SEED.to_json %>

# window.MATCH_FOR_SEED = {}
# window.SEED_FOR_SLOT  = {}
# window.SLOT_FOR_SEED  = {}
# SEED_FOR_SLOT_ARR = <%= JSON.generate(Tournament::SEED_FOR_SLOT_ARR) %>
# for t_size, seed_for_slot of SEED_FOR_SLOT_ARR
#   MATCH_FOR_SEED[t_size] = [] ; SLOT_FOR_SEED[t_size] = []; SEED_FOR_SLOT[t_size] = []
#   for seed, slot in seed_for_slot
#     continue if seed is 0
#     SEED_FOR_SLOT[ t_size][slot] = seed
#     SLOT_FOR_SEED[ t_size][seed] = slot
#     MATCH_FOR_SEED[t_size][seed] = Math.ceil(slot / 2)
# console.log( MATCH_FOR_SEED, <%= Tournament::MATCH_FOR_SEED.to_json %>)
# console.log( SLOT_FOR_SEED,  <%= Tournament::SLOT_FOR_SEED.to_json %>)
# console.log( SEED_FOR_SLOT,  <%= Tournament::SEED_FOR_SLOT.to_json %>)
